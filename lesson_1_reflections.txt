How did viewing a diff between two versions of a file help you see the bug that was introduced?
I was clearly able to see where the mistake in the code was an quickly fix it by looking at the two different versions of the file
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You will have easy acceess to previous versions so if an update breaks a program you can easily roll back to a previous version, while looking at what changes you have made.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
pros: user control. It just happens when the user wants an item to be saved.
cons: a user might forget to save and not create a commit. You are relient on them using good practice.
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because they are used for different reasons. Not all are specifically designed with code in mind.
How can you use the commands git log and git diff to view the history of files?
Git log gives you all the commits and by comparing them with previous commits you can see what changes were made
How might using version control make you more confident to make changes that could break something?
Because anything you change can then be undone by rolling back to a previous version
Now that you have your workspace set up, what do you want to try using Git for?
to build the premier league iteration of how trump are you 